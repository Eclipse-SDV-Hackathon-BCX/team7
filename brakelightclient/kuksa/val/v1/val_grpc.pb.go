// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: kuksa/val/v1/val.proto

package kuksa_grpc_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VALClient is the client API for VAL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VALClient interface {
	// Get entries
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Set entries
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	// Subscribe to a set of entries
	//
	// Returns a stream of notifications.
	//
	// InvalidArgument is returned if the request is malformed.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VAL_SubscribeClient, error)
	// Shall return information that allows the client to determine
	// what server/server implementation/version it is talking to
	// eg. kuksa-databroker 0.5.1
	GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*GetServerInfoResponse, error)
}

type vALClient struct {
	cc grpc.ClientConnInterface
}

func NewVALClient(cc grpc.ClientConnInterface) VALClient {
	return &vALClient{cc}
}

func (c *vALClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/kuksa.val.v1.VAL/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vALClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/kuksa.val.v1.VAL/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vALClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VAL_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &VAL_ServiceDesc.Streams[0], "/kuksa.val.v1.VAL/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &vALSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VAL_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type vALSubscribeClient struct {
	grpc.ClientStream
}

func (x *vALSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vALClient) GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*GetServerInfoResponse, error) {
	out := new(GetServerInfoResponse)
	err := c.cc.Invoke(ctx, "/kuksa.val.v1.VAL/GetServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VALServer is the server API for VAL service.
// All implementations must embed UnimplementedVALServer
// for forward compatibility
type VALServer interface {
	// Get entries
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Set entries
	Set(context.Context, *SetRequest) (*SetResponse, error)
	// Subscribe to a set of entries
	//
	// Returns a stream of notifications.
	//
	// InvalidArgument is returned if the request is malformed.
	Subscribe(*SubscribeRequest, VAL_SubscribeServer) error
	// Shall return information that allows the client to determine
	// what server/server implementation/version it is talking to
	// eg. kuksa-databroker 0.5.1
	GetServerInfo(context.Context, *GetServerInfoRequest) (*GetServerInfoResponse, error)
	mustEmbedUnimplementedVALServer()
}

// UnimplementedVALServer must be embedded to have forward compatible implementations.
type UnimplementedVALServer struct {
}

func (UnimplementedVALServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVALServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedVALServer) Subscribe(*SubscribeRequest, VAL_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedVALServer) GetServerInfo(context.Context, *GetServerInfoRequest) (*GetServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedVALServer) mustEmbedUnimplementedVALServer() {}

// UnsafeVALServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VALServer will
// result in compilation errors.
type UnsafeVALServer interface {
	mustEmbedUnimplementedVALServer()
}

func RegisterVALServer(s grpc.ServiceRegistrar, srv VALServer) {
	s.RegisterService(&VAL_ServiceDesc, srv)
}

func _VAL_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VALServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuksa.val.v1.VAL/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VALServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VAL_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VALServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuksa.val.v1.VAL/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VALServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VAL_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VALServer).Subscribe(m, &vALSubscribeServer{stream})
}

type VAL_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type vALSubscribeServer struct {
	grpc.ServerStream
}

func (x *vALSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VAL_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VALServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuksa.val.v1.VAL/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VALServer).GetServerInfo(ctx, req.(*GetServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VAL_ServiceDesc is the grpc.ServiceDesc for VAL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VAL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuksa.val.v1.VAL",
	HandlerType: (*VALServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _VAL_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _VAL_Set_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _VAL_GetServerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _VAL_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kuksa/val/v1/val.proto",
}
